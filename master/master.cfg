# -*- python -*-
# ex: set syntax=python:

# This is rust-buildbot's buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# You will probably need to read the buildbot manual at some length to
# understand what's going on in here. A quick summary follows:
#
# - ChangeSoruces (GitPoller) run server-side polling git for changes
# - Schedulers (AnyBranchScheduler) trigger builds
# - Builders represent work-queues that Schedulers dump BuildRequests into
# - BuildRequests cause a BuildFactory to make Builds
# - Builds get dispatched to Slaves
# - The slave runs the sequence of Steps in the Build
#
# To customize the behavior of a _Step_, we pass _Properties_.
# 
# A property is a k=v pair attached to a BuildRequest passing through
# the system. It can be overridden at each stage of processing, but
# since we want to give forced-builds (from users) a fair amount of
# flexibility, we try to set our default properties early (in
# Schedulers).
#
# Properties can be set by users, by schedulers, by builders, by
# slaves, and by buildsteps themselves in response to their
# environment.
#
# We often want a mixture of such configuration and control, so we use
# properties for everything. Any steps in the BuildFactory that we
# expect to vary (aside from the branch being served), we parameterize
# through properties and adjust the commands issued in the steps
# themselves through IRenderables, doStepIf, and similar
# property-driven customization. Note that this means most variability
# can change _request by request_; if you wire-in variability when
# setting up the builder, you'll be stuck always doing the same thing
# in that builder.


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

rust_git = "git://github.com/mozilla/rust.git"
rust_s3 = "s3://static.rust-lang.org"

all_branches = ["master", "incoming", "try",
                "snap-stage3", "dist-snap"]

incoming_quick_platforms = ["mac", "linux", "win", "bsd"]
incoming_full_platforms = ["mac", "linux", "win", "bsd"]
master_platforms = ["mac", "linux", "win", "bsd"]
try_platforms = ["mac", "linux", "win", "bsd"]
snap_platforms = ["mac", "linux", "win", "bsd"]
dist_platforms = ["linux", "win"]
doc_platform = "linux"

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = []
for line in open("slave-list.txt"):
    if line.startswith("#"):
        continue
    fields = line.split()
    if len(fields) == 2:
    	c['slaves'].append(BuildSlave(fields[0], fields[1], max_builds=1))
    elif len(fields) == 3:
    	c['slaves'].append(BuildSlave(fields[0], fields[1], 
				      max_builds=int(fields[2])))


# We listen for slaves only on localhost; there should be an stunnel
# loopback forwarding to here.

c['slavePortnum'] = "tcp:9989:interface=127.0.0.1"

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

main_sources = [GitPoller(rust_git,
                          workdir='gitpoller-workdir-%s' % b,
                          branch=b,
                          pollinterval=60) for b in all_branches]

c['change_source'] = main_sources

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.changes import filter

try_sched = AnyBranchScheduler(
    name="try-sched",
    change_filter=filter.ChangeFilter(branch='try'),
    treeStableTimer=None,
    properties={"valgrind": False,
                "docs": False,
                "check": "lite"},
    builderNames=["try-" + p for p in try_platforms])

incoming_quick_sched = AnyBranchScheduler(
    name="incoming-quick-sched",
    change_filter=filter.ChangeFilter(branch='incoming'),
    treeStableTimer=5*60,
    properties={"valgrind": False,
                "docs": False,
                "check": "lite"},
    builderNames=["incoming-quick-" + p for p in incoming_quick_platforms])

incoming_full_sched = AnyBranchScheduler(
    name="incoming-full-sched",
    change_filter=filter.ChangeFilter(branch='incoming'),
    treeStableTimer=30*60,
    properties={"valgrind": True,
                "targets": "all",
                "check": True},
    builderNames=["incoming-full-" + p for p in incoming_full_platforms])

master_sched = AnyBranchScheduler(
    name="master-sched",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=30*60,
    properties={"valgrind": True,
                "targets": "all",
                "check": True},
    builderNames=["master-" + p for p in master_platforms])

doc_sched = AnyBranchScheduler(
    name="doc-sched",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=30*60,
    builderNames=["doc"])

snap_sched = AnyBranchScheduler(
    name="snap3-sched",
    change_filter=filter.ChangeFilter(branch='snap-stage3'),
    treeStableTimer=None,
    properties={#"valgrind": True,
                # "targets": "all",
                "snap3": True,
                "check": False},
    builderNames=["snap3-" + p for p in snap_platforms])

dist_sched = AnyBranchScheduler(
    name="dist-sched",
    change_filter=filter.ChangeFilter(branch='dist-snap'),
    treeStableTimer=None,
    properties={"valgrind": True,
                "targets": "all",
                "check": True},
    builderNames=["dist-" + p for p in dist_platforms])

c['schedulers'] = [
try_sched,
incoming_quick_sched,
incoming_full_sched,
master_sched,
doc_sched,
snap_sched,
dist_sched
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.source.git import Git
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE, SKIPPED, \
     EXCEPTION, RETRY, worst_status
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test, SetProperty
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.config import BuilderConfig
from buildbot.interfaces import IRenderable
from zope.interface import implements
import re

def props_has_positive_key(props, keyname):
    if keyname in props:
        if str(props[keyname]).lower() in ["no", "false", "0"]:
            return False
        return True
    return False

# property-based doStepIf helper
def should_wipe(step):
    props = step.build.getProperties()
    if props.has_key("wipe"):
        return True
    if props.has_key("oldfiles"):
        return props["oldfiles"] != "0"
    return False

# property-based doStepIf helper
def should_build(step):
    props = step.build.getProperties()
    return props_has_positive_key(props, "check") or \
        props_has_positive_key(props, "build") or \
        props_has_positive_key(props, "snap3")

# property-based doStepIf helper
def should_check(step):
    props = step.build.getProperties()
    return props_has_positive_key(props, "check")

# property-based doStepIf helper
def should_snap3(step):
    props = step.build.getProperties()
    return props_has_positive_key(props, "snap3")

# property-based IRenderable helper
class CheckCommand(object):
    implements(IRenderable)
    def getRenderingFor(self, props):
        chk = "check"
        if "check" in props:
            chk = props["check"]
            if "buildername" in props and \
                    "win" in props["buildername"] and \
                    chk in ["check-lite", "check",
                            "yes", "true", True]:
                chk = "check-fast"

        if re.search("^check(-[a-zA-Z0-9-_\.]+)?$", chk):
            return ["make", chk]

        return ["make", "check"]

# property-based IRenderable helper
class CommandEnv(object):
    implements(IRenderable)
    def getRenderingFor(self, props):
        if "buildername" in props:
            # This is required to trigger certain workarounds done
            # slave-side by buildbot. In particular omitting the PWD
            # variable with an unmangled pathname.
            if "win" in props["buildername"]:
                return {"MACHTYPE": "i686-pc-msys",
                        "MSYSTEM": "MINGW32"}
        return None

# property-based IRenderable helper
class ConfigCommand(object):
    implements(IRenderable)
    def getRenderingFor(self, props):
        opts=["sharedstd", "valgrind", "helgrind",
              "docs", "optimize", "optimize-cxx", "optimize-llvm",
              "debug", "pax-flags"]
        s = "../configure"
        for opt in opts:
            if opt in props:
                v = props_has_positive_key(props, opt)
                if v:
                    s += " --enable-" + opt
                else:
                    s += " --disable-" + opt

        if "targets" in props:
            if props["targets"] == "all" and "buildername" in props:
                builder = props["buildername"]
                if "mac" in builder:
                    tgts = ["i686-apple-darwin", "x86_64-apple-darwin"]
                elif "linux" in builder:
                    tgts = ["i686-unknown-linux-gnu", "x86_64-unknown-linux-gnu"]
            else:
                tgts = [t for t in props["targets"] \
                            if re.search("^[a-zA-Z0-9-_\.]+$", t)]

            s += " --target-triples=" + ",".join(tgts)

        return ['sh', '-c', s]


def do_build(mk_targets=None,
             full_meth=None):
    global rust_git
    global rust_s3
    f = BuildFactory()

    # We wipe if the user requests it or if there are any files
    # older than 5 days in the build dir
    f.addStep(SetProperty(command=["sh", "-c", "/usr/bin/find . -ctime +5 | wc -l"],
                          property="oldfiles"))
    f.addStep(RemoveDirectory("build",
                              doStepIf=should_wipe))

    if full_meth != None:
        f.addStep(Git(repourl=rust_git,
	              submodule=True,
                      progress=True,
                      retryFetch=True,
                      clobberOnFailure=True,
                      mode='full',
                      method=full_meth))
    else:
        f.addStep(Git(repourl=rust_git,
	              submodule=True,
                      progress=True,
                      retryFetch=True,
                      clobberOnFailure=True,
                      mode='incremental'))

    f.addStep(Configure(env=CommandEnv(),
                        command=ConfigCommand(),
                        workdir="build/obj"))

    # Temporary until we convince the build system
    # to handle 0.x 0.x+1 co-occurrence in workspace
    f.addStep(Compile(env=CommandEnv(),
                      description="make clean",
                      descriptionDone="cleaned",
                      workdir="build/obj",
                      command=["make", "clean"]))

    f.addStep(Compile(env=CommandEnv(),
		      timeout=3600,
                      workdir="build/obj"))

    f.addStep(Test(env=CommandEnv(),
                   doStepIf=should_check,
                   command=CheckCommand(),
                   timeout=3600,
                   workdir="build/obj"))

    # snap3 steps
    f.addStep(Compile(env=CommandEnv(),
                      doStepIf=should_snap3,
                      command=["make", "snap-stage3"],
		      timeout=3600,
                      workdir="build/obj"))
    f.addStep(SetProperty(command=["sh", "-c", "ls rust-stage0-*.tar.bz2"],
                          doStepIf=should_snap3,
                          workdir="build/obj",
                          property="snap3_file"))
    f.addStep(FileUpload(slavesrc=Property("snap3_file"),
                         masterdest=WithProperties("tmp/%(snap3_file)s"),
                         workdir="build/obj",
                         doStepIf=should_snap3))
    f.addStep(MasterShellCommand(doStepIf=should_snap3,
                                 command=["sh", "-c",
                                          WithProperties("s3cmd put -P tmp/%(snap3_file)s " + rust_s3 + "/tmp/")]))

    for t in mk_targets:
        if "check" not in t:
            f.addStep(Test(env=CommandEnv(),
                           command=["make", t],
                           timeout=3600,
                           workdir="build/obj"))
    return f

c['builders'] = []

def platform_slaves(p):
    return [slave.slavename
            for slave in c['slaves']
            if p in slave.slavename]

for p in try_platforms:
    # Builder that does incremental-make-check-lite runs,
    # host=target only, no valgrind, no perf.
    c['builders'].append(BuilderConfig(
            mergeRequests=False,
            name="try-" + p,
            category="try",
            slavenames=platform_slaves(p),
            factory=do_build(["check-lite"])))

for p in incoming_quick_platforms:
    # Builder that does incremental-make-check-lite runs,
    # host=target only, no valgrind, no perf.
    c['builders'].append(BuilderConfig(
            mergeRequests=False,
            name="incoming-quick-" + p,
            category="incoming-quick",
            slavenames=platform_slaves(p),
            factory=do_build(["check-lite"])))

for p in incoming_full_platforms:
    # Builder that does a full, laborious from-scratch build
    # on all targets, checks valgrind, profiles code, etc.
    c['builders'].append(BuilderConfig(
            mergeRequests=True,
            name="incoming-full-" + p,
            category="incoming-full",
            slavenames=platform_slaves(p),
            factory=do_build(["check"], "fresh")))

for p in master_platforms:
    # Builder that does a full, laborious from-scratch build
    # on all targets, checks valgrind, profiles code, etc.
    c['builders'].append(BuilderConfig(
            mergeRequests=True,
            name="master-" + p,
            category="master",
            slavenames=platform_slaves(p),
            factory=do_build(["check"], "fresh")))

for p in snap_platforms:
    # Builder that does whatever's needed to make stage3 snaps.
    c['builders'].append(BuilderConfig(
            mergeRequests=True,
            name="snap3-" + p,
            category="util-snap3",
            slavenames=platform_slaves(p),
            factory=do_build([], "fresh")))

for p in dist_platforms:
    # Builder that does whatever's needed to make releases.
    c['builders'].append(BuilderConfig(
            mergeRequests=True,
            name="dist-" + p,
            category="util-dist",
            slavenames=platform_slaves(p),
            factory=do_build(["check",
                              "distcheck"],
                             "fresh")))

# Builder that does whatever's needed to make docs.
c['builders'].append(BuilderConfig(
        mergeRequests=True,
        name="doc",
        category="util-doc",
        slavenames=platform_slaves(doc_platform),
        factory=do_build(["docs"])))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
    showUsersPage = True,
)
c['status'].append(html.WebStatus(
        revlink='http://github.com/mozilla/rust/commit/%s',
        order_console_by_time=True,
        #http_port="tcp:8010:interface=127.0.0.1",
        http_port="tcp:8010",
        authz=authz_cfg))

from buildbot.status import words
if False:
    c['status'].append(words.IRC(host="63.245.216.214",
			     port=6697,
			     useSSL=True,
                             nick="rust-buildbot",
                             channels=["#rust"]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Rust"
c['titleURL'] = "http://rust-lang.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://rust1.vm.labs.scl3.mozilla.com:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

